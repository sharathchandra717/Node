Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. 
Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. 
Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding
event which signals the event-listener function to execute.

Node.js is an event-based platform. This means that everything that happens in Node is the reaction to an event. A 
transaction passing through Node traverses a cascade of callbacks.

Abstracted away from the developer, this is all handled by a library called libuv which provides a mechanism called an event loop.

The Event Loop is a queue of callback functions. When an async function executes, the callback function is pushed into the queue. 
The JavaScript engine doesn't start processing the event loop until the code after an async function has executed.
